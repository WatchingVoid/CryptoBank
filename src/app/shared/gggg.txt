import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-search',
  template: `
    <input type="text" [(ngModel)]="searchTerm" placeholder="Search..." (input)="onSearchChange()" />
  `,
  styles: [
    `
      input {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
      }
    `
  ]
})
export class SearchComponent {
  searchTerm: string = '';
  
  @Output() searchChange = new EventEmitter<string>();

  onSearchChange() {
    this.searchChange.emit(this.searchTerm);
  }
}
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class SearchService {

  constructor() { }

  filterItems<T>(items: T[], searchTerm: string, fields: (keyof T)[]): T[] {
    if (!searchTerm) {
      return items;
    }
    return items.filter(item => 
      fields.some(field => 
        item[field]?.toString().toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  }
}
import { Component, OnInit } from '@angular/core';
import { CryptoService } from 'src/app/service/crypto.service';
import { SearchService } from 'src/app/shared/search.service';

@Component({
  selector: 'app-watchlist',
  templateUrl: './watchlist.component.html',
  styleUrls: ['./watchlist.component.scss']
})
export class WatchlistComponent implements OnInit {
  cryptocurrencies: any[] = [];
  filteredCryptocurrencies: any[] = [];

  constructor(private cryptoService: CryptoService, private searchService: SearchService) {}

  ngOnInit(): void {
    this.cryptoService.getCryptoListings().subscribe(
      (data) => {
        this.cryptocurrencies = data.data.map((item: any) => ({
          id: item.id,
          name: item.name,
          symbol: item.symbol,
          price: item.quote.USD.price,
          marketCap: item.quote.USD.market_cap,
          supply: item.total_supply
        }));
        this.filteredCryptocurrencies = this.cryptocurrencies;
      },
      (error) => {
        console.error('Ошибка при загрузке данных:', error);
      }
    );
  }

  onSearchChange(searchTerm: string) {
    this.filteredCryptocurrencies = this.searchService.filterItems(
      this.cryptocurrencies, 
      searchTerm, 
      ['name', 'symbol']
    );
  }
}
<h2 class="title">Cryptocurrency Watchlist</h2>
<app-search (searchChange)="onSearchChange($event)"></app-search>
<table class="watchlist-table">
  <thead>
    <tr>
      <th (click)="sortTable('name')">Name</th>
      <th (click)="sortTable('symbol')">Symbol</th>
      <th (click)="sortTable('price')">Price</th>
      <th (click)="sortTable('marketCap')">Market Cap</th>
      <th (click)="sortTable('supply')">Supply</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let crypto of filteredCryptocurrencies">
      <td>{{crypto.name}}</td>
      <td>{{crypto.symbol}}</td>
      <td>{{crypto.price | currency}}</td>
      <td>{{crypto.marketCap | number}}</td>
      <td>{{crypto.supply | number}}</td>
    </tr>
  </tbody>
</table>
import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SearchService } from 'src/app/shared/search.service';

interface Transaction {
  id: number;
  token: string;
  amount: number;
  type: string;
  date: string;
}

interface Wallet {
  totalValue: number;
  tokens: { symbol: string, amount: number }[];
}

@Component({
  selector: 'app-wallet',
  templateUrl: './wallet.component.html',
  styleUrls: ['./wallet.component.scss']
})
export class WalletComponent implements OnInit {
  wallet: Wallet | null = null;
  transactions: Transaction[] = [];
  filteredTokens: any[] = [];

  constructor(private http: HttpClient, private searchService: SearchService) {}

  ngOnInit(): void {
    this.fetchWallet().subscribe(data => {
      this.wallet = data;
      this.filteredTokens = this.wallet.tokens;
    });
    this.fetchTransactions().subscribe(data => this.transactions = data);
  }

  fetchWallet(): Observable<Wallet> {
    return this.http.get<Wallet>('http://localhost:3000/wallet');
  }

  fetchTransactions(): Observable<Transaction[]> {
    return this.http.get<Transaction[]>('http://localhost:3000/transactions');
  }

  onSearchChange(searchTerm: string) {
    if (this.wallet) {
      this.filteredTokens = this.searchService.filterItems(
        this.wallet.tokens, 
        searchTerm, 
        ['symbol']
      );
    }
  }
}
<h2 class="title">Wallet</h2>
<app-search (searchChange)="onSearchChange($event)"></app-search>
<div class="wallet-summary" *ngIf="wallet">
  <p>Total Portfolio Value: <span>{{wallet.totalValue | currency}}</span></p>
  <div class="token-list">
    <div *ngFor="let token of filteredTokens" class="token-item">
      <p>{{token.symbol}}: <span>{{token.amount | number:'1.2-2'}} USD</span></p>
    </div>
  </div>
</div>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////